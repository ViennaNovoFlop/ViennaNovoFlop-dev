//File thermalfieldsimple.h
//Example anisotropy class definition.
//This class is derived from the Oxs_Energy class.
//
#ifndef _OXS_THERMALFIELDSIMPLE
#define _OXS_THERMALFIELDSIMPLE

#include "energy.h"
#include "threevector.h"
#include "mesh.h"
#include "meshvalue.h"
#include "simstate.h"
#include "scalarfield.h"
#include "vectorfield.h"
#include "util.h"
#include "key.h"
#include <string>
#include <random>
#include <chrono>

/* End includes */
typedef std::chrono::high_resolution_clock myclock;

class Oxs_ThermalFieldSimple:public Oxs_Energy {
private:
  Oxs_OwnedPointer<Oxs_ScalarField> T_init;
  Oxs_OwnedPointer<Oxs_ScalarField> alpha_init;
  //requires hacking of <random> due to missing set method!!! maybe later
  //Oxs_OwnedPointer<Oxs_ScalarField> D_init;
  //OC_REAL8m D;
  // limits the minimum time which will be used for field calculation
  //OC_REAL8m min_time_step;
  OC_REAL8m time_step;
 // clock for seed
  myclock::time_point beginning;
  mutable OC_UINT4m mesh_id;
  mutable Oxs_MeshValue<OC_REAL8m> T;
  mutable Oxs_MeshValue<OC_REAL8m> alpha;
  /// T and alpha are cached values filled by corresponding
  /// *_init members when a change in mesh is detected.
public:
virtual const char* ClassName() const; // ClassName() is
/// automatically generated by the OXS_EXT_REGISTER macro.
virtual OC_BOOL Init();

Oxs_ThermalFieldSimple(const char* name, // Child instance id
			Oxs_Director* newdtr, // App director
			//Tcl_Interp* safe_interp, // Safe interpreter
			const char* argstr); // MIF input block parameters

virtual ~Oxs_ThermalFieldSimple() {}

virtual void GetEnergy(const Oxs_SimState& state,Oxs_EnergyData& oed) const;
};
#endif // _OXS_THERMALFIELDSIMPLE


