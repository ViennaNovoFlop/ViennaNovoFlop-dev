/* FILE: thermalfield.h            -*-Mode: c++-*-
 * 24.1.2013 Thomas Windbacher (TW)
 * Thermal Field derived from Uniaxial Anisotropy and Oxs_Energy class.
 * See: Finocchio, J. Appl. Phys. 99 doi:10.1063/1.2177049
 */

#ifndef _OXS_THERMALFIELD
#define _OXS_THERMALFIELD

#include <string>
#include <random>
#include <chrono>
#include "nb.h"
#include "threevector.h"
#include "util.h"
#include "energy.h"
#include "key.h"
#include "simstate.h"
#include "mesh.h"
#include "meshvalue.h"
#include "oxsthread.h"
#include "scalarfield.h"
#include "vectorfield.h"

/* End includes */

typedef std::chrono::high_resolution_clock myclock;

class Oxs_ThermalField:public Oxs_ChunkEnergy {
private:
  Oxs_OwnedPointer<Oxs_ScalarField> T_init;
  Oxs_OwnedPointer<Oxs_ScalarField> alpha_init;
  OC_REAL8m D;
  //OC_REAL8m min_time_step;
  OC_REAL8m time_step;
  OC_BOOL   fixed_time_step;
//components needed for pseudo random number generation
  mutable std::default_random_engine generatorx;
  mutable myclock::time_point beginning;
  mutable myclock::duration dx;
  mutable std::normal_distribution<OC_REAL8m> distributionx;
  //OC_REAL8m thermal_energy;
  mutable Oxs_ThreadControl thread_control;
  mutable OC_UINT4m mesh_id;
  mutable Oxs_MeshValue<OC_REAL8m> T;
  mutable Oxs_MeshValue<OC_REAL8m> alpha;
  /// T and alpha are cached values filled by corresponding
  /// *_init members when a change in mesh is detected.

  void IntegEnergy(const Oxs_SimState& state,
                       Oxs_ComputeEnergyDataThreaded& ocedt,
                       Oxs_ComputeEnergyDataThreadedAux& ocedtaux,
                       OC_INDEX node_start,OC_INDEX node_stop) const;
  void UpdateDerivedOutputs(const Oxs_SimState& state); 

protected:
  virtual void GetEnergy(const Oxs_SimState& state,
			 Oxs_EnergyData& oed) const {
    GetEnergyAlt(state,oed);
  }

  virtual void ComputeEnergy(const Oxs_SimState& state,
                             Oxs_ComputeEnergyData& oced) const {
    ComputeEnergyAlt(state,oced);
  }

  virtual void ComputeEnergyChunk(const Oxs_SimState& state,
                                  Oxs_ComputeEnergyDataThreaded& ocedt,
                                  Oxs_ComputeEnergyDataThreadedAux& ocedtaux,
                                  OC_INDEX node_start,OC_INDEX node_stop,
                                  int threadnumber) const;
  virtual void ComputeEnergyChunkInitialize(const Oxs_SimState& /* state */, 
  					    Oxs_ComputeEnergyDataThreaded& /* ocedt */,
  					    Oxs_ComputeEnergyDataThreadedAux& /* ocedtaux */,
  					    int /* number_of_threads */) const;

public:
  virtual const char* ClassName() const; // ClassName() is
  /// automatically generated by the OXS_EXT_REGISTER macro.
  Oxs_ThermalField(const char* name,  // Child instance id
			 Oxs_Director* newdtr, // App director
			 const char* argstr);  // MIF input block parameters
  virtual ~Oxs_ThermalField() {}
  virtual OC_BOOL Init();

};


#endif // _OXS_THERMALFIELD
