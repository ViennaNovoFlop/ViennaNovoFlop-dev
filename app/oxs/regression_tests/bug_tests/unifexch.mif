# MIF 2.1
# MIF Test File: unifexch.mif
# Description: Regression test file covering kernels in the
#     Oxs_UniformExchange class.

set pi [expr 4*atan(1.0)]
set mu0 [expr 4*$pi*1e-7]

RandomSeed 1

Parameter shape ellipsoid ;# One of ellipsoid, ellipse, rectangle, random

switch -exact [string tolower $shape] {
   ellipsoid { set shapeproc Ellipsoid }
   ellipse   { set shapeproc Ellipse }
   rectangle { set shapeproc Rectangle }
   random    { set shapeproc RandomShape }
   default {
      error "Invalid shape \"$shape\"; should be one of\
            ellipsoid, ellipse, rectangle or random"
   }
}


Parameter exchtype A   ;# For 6ngbrmirror kernel, "A" or "lex"; otherwise "A"
Parameter zcount 1
Parameter kernel 6ngbr
## Valid values for kernel are:
##      6ngbrfree 6ngbrmirror 6ngbrmirror_std 6ngbrbigangmirror 6ngbrzd2
##      12ngbrfree 12ngbrzd1 12ngbrzd1b 12ngbrmirror
##      26ngbr
## Special restrictions:
##        12ngbrfree --- each dimension must be 1 or >=10
##        12ngbrzd1  --- each dimension must be 1 or >=10
##        12ngbrzd1b --- each dimension must be 1 or >= 5
## Special options:
##        6ngbrmirror --- supports "lex" option in place of "A"
##

set xcellsize 3e-9
set ycellsize 5e-9
set zcellsize 7e-9

Specify Oxs_BoxAtlas:atlas [subst {
  xrange {0 [expr {55*$xcellsize}]}
  yrange {0 [expr {37*$ycellsize}]}
  zrange {0 [expr {$zcount*$zcellsize}]}
}]

Specify Oxs_RectangularMesh:mesh [subst {
  cellsize {$xcellsize $ycellsize $zcellsize}
  atlas :atlas
}]

set Ms 800e3
set A 13e-12
set lex [expr {sqrt($A/(0.5*$mu0))/$Ms}]
if {[string match "lex" $exchtype]} {
   set exchval $lex
} else {
   set exchval $A
}

Specify Oxs_UniformExchange [subst {
  $exchtype $exchval
  kernel $kernel 
}]

Specify Oxs_RungeKuttaEvolve:evolve {}

# Shape procs
proc Ellipsoid { value x y z } {
   set x [expr {2.*$x-1.}]
   set y [expr {2.*$y-1.}]
   set z [expr {2.*$z-1.}]
   if {$x*$x+$y*$y+$z*$z>=1} {
      return 0.0
   }
   return $value
}

proc Ellipse { value x y z } {
   set x [expr {2.*$x-1.}]
   set y [expr {2.*$y-1.}]
   if {$x*$x+$y*$y>=1} {
      return 0.0
   }
   return $value
}

proc Rectangle { value x y z } {
   return $value
}

proc RandomShape { value x y z } {
   set scale [expr {rand()}]
   if {$scale<0.25} {
      return 0.0
   }
   return [expr {$scale*$value}]
}

proc Texture {} {
   set weight 0.25
   set tx [expr {2*rand()-1.0}]
   set ty [expr {2*rand()-1.0}]
   set tz [expr {2*rand()-1.0}]
   set x [expr {3*(1.0 + $weight*$tx)}]
   set y [expr {2*(1.0 + $weight*$ty)}]
   set z [expr {1.0 + $weight*$tz}]
   return [list $x $y $z]
}

Specify Oxs_TimeDriver [subst {
 basename unifexch
 evolver :evolve
 stopping_dm_dt 0.1
 total_iteration_limit 10
 mesh :mesh
 Ms { Oxs_ScriptScalarField {
    script "$shapeproc $Ms"
    script_args relpt
    atlas :atlas
 }}
 m0 { Oxs_ScriptVectorField {
    script Texture
    script_args {}
    atlas :atlas
    norm 1.0
 }}
}]

Destination archive mmArchive
Schedule DataTable archive Step 1
