# MIF 2.1
# MIF Example File: alphacheck.mif
# Description: Example with time varying applied field and
#              spatially varying damping parameter alpha.

set pi [expr 4*atan(1.0)]
set mu0 [expr 4*$pi*1e-7]

RandomSeed 1

# Solver should be one of the following:
#   euler, rk2, rk2heun, rk4, rkf54, rkf54m, rkf54s, cg
Parameter solver rkf54

Parameter cellsize 5e-9

Parameter H_amp    10 ;# Applied field amplitude in mT
Parameter H_freq    1 ;# Applied field frequency in GHz

set Hw [expr {2*$pi*$H_freq*1e9}]  ;# Convert freq from GHz to radians/sec

set length 255e-9
set width   15e-9
set thick   20e-9

Specify Oxs_BoxAtlas:atlas [subst {
  xrange {0  $length}
  yrange {0  $width}
  zrange {0  $thick}
}]

Specify Oxs_MultiAtlas:fixed [subst {
   atlas { Oxs_BoxAtlas:left {
      xrange {0   $cellsize}
      yrange {0   $width}
      zrange {0   $thick}
   }}
   atlas { Oxs_BoxAtlas:right {
      xrange {[expr {$length-$cellsize}] $length}
      yrange {0   $width}
      zrange {0   $thick}
   }}
   atlas { Oxs_BoxAtlas:middle {
      xrange {[expr {($length-1.1*$cellsize)/2}] \
                 [expr {($length+1.1*$cellsize)/2}]}
      yrange {0   $width}
      zrange {0   $thick}
   }}
}]

Specify Oxs_RectangularMesh:mesh [subst {
  cellsize {$cellsize $cellsize $cellsize}
  atlas :atlas
}]

Specify Oxs_UniaxialAnisotropy {
  K1   5e3
  axis {1 0 0}
}

Specify Oxs_UniformExchange {
   A  13e-12
}

# For simplicity, no demag
Ignore Specify Oxs_Demag {}

# Evolvers
if {[string match rk* $solver]} {
   Specify Oxs_RungeKuttaEvolve:evolve [subst {
      method $solver
      fixed_spins {:fixed left middle right}
   }]
   set driver Oxs_TimeDriver
} elseif {[string compare euler $solver]==0} {
   Specify Oxs_EulerEvolve:evolve {
      fixed_spins {:fixed left middle right}
   }
   set driver Oxs_TimeDriver
} elseif {[string compare cg $solver]==0} {
   Specify Oxs_CGEvolve:evolve {
      fixed_spins {:fixed left middle right}
   }
   set driver Oxs_MinDriver
}

# Drivers
if {[string compare Oxs_TimeDriver $driver]==0} {
   # Time varying applied field
   proc Happ { t } {
      # Import time is in seconds.
      # Return value is field in mT.
      global H_amp Hw
      set Hy [expr {$H_amp*sin($Hw*$t)}]
      set dHy_dt [expr {$Hw*$H_amp*cos($Hw*$t)}]
      return [list 0. $Hy 0. 0. $dHy_dt 0.]
   }

   Specify Oxs_ScriptUZeeman [subst {
      script_args total_time
      script Happ
      multiplier [expr {1.0/(1000.*$mu0)}]
   }]

   Specify Oxs_TimeDriver [subst {
      evolver :evolve
      total_iteration_limit 25
      stopping_time 1e-9
      mesh :mesh
      Ms 800e3
      m0 { 1 0.01 0.0 }
   }]
} elseif {[string compare Oxs_MinDriver $driver]==0} {
   # Can't do time-varying field with minimization driver,
   # so use a single fixed value.
   proc Happ { fixed_t } {
      # Import time is in seconds.
      # Return value is field in mT.
      global H_amp Hw
      set Hy [expr {$H_amp*sin($Hw*$fixed_t)}]
      set dHy_dt 0.0
      return [list 0. $Hy 0. 0. $dHy_dt 0.]
   }

   Specify Oxs_ScriptUZeeman [subst {
      script_args {}
      script {Happ 1e-10}
      multiplier [expr {1.0/(1000.*$mu0)}]
   }]

   Specify Oxs_MinDriver [subst {
      evolver :evolve
      total_iteration_limit 100
      stopping_mxHxm 1e-5
      mesh :mesh
      Ms 800e3
      m0 { 1 0.01 0.0 }
   }]
}

Destination archive mmArchive
Schedule DataTable archive Step 1
Schedule ${driver}::Spin archive Stage 1
